{
    attributes = (
        {
            columnName = "FANN_KEY"; 
            externalType = NUMBER; 
            name = fannKey; 
            precision = 6; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            columnName = "IDIPL_NUMERO"; 
            externalType = NUMBER; 
            name = idiplNumero; 
            precision = 6; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            columnName = "IMREC_ABSENCE1"; 
            externalType = NUMBER; 
            name = imrecAbsence1; 
            precision = 1; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            columnName = "IMREC_ABSENCE2"; 
            externalType = NUMBER; 
            name = imrecAbsence2; 
            precision = 1; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_COEFFICIENT"; 
            externalType = NUMBER; 
            name = imrecCoefficient; 
            precision = 5; 
            scale = 2; 
            valueClassName = NSDecimalNumber; 
            valueType = B; 
        }, 
        {
            columnName = "IMREC_DISPENSE"; 
            externalType = NUMBER; 
            name = imrecDispense; 
            precision = 1; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            columnName = "IMREC_ETAT"; 
            externalType = NUMBER; 
            name = imrecEtat; 
            precision = 1; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            columnName = "IMREC_MENTION1"; 
            externalType = NUMBER; 
            name = imrecMention1; 
            precision = 1; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            columnName = "IMREC_MENTION2"; 
            externalType = NUMBER; 
            name = imrecMention2; 
            precision = 1; 
            valueClassName = NSNumber; 
            valueType = l; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_NOTE_BASE"; 
            externalType = NUMBER; 
            name = imrecNoteBase; 
            precision = 5; 
            scale = 2; 
            valueClassName = NSDecimalNumber; 
            valueType = B; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_OBTENTION"; 
            externalType = VARCHAR2; 
            name = imrecObtention; 
            valueClassName = NSString; 
            valueType = S; 
            width = 50; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_POINT_JURY"; 
            externalType = NUMBER; 
            name = imrecPointJury; 
            precision = 5; 
            scale = 2; 
            valueClassName = NSDecimalNumber; 
            valueType = B; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_PONDERATION"; 
            externalType = NUMBER; 
            name = imrecPonderation; 
            precision = 5; 
            scale = 2; 
            valueClassName = NSDecimalNumber; 
            valueType = B; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_SESSION1"; 
            externalType = NUMBER; 
            name = imrecSession1; 
            precision = 5; 
            scale = 2; 
            valueClassName = NSDecimalNumber; 
            valueType = B; 
        }, 
        {
            allowsNull = Y; 
            columnName = "IMREC_SESSION2"; 
            externalType = NUMBER; 
            name = imrecSession2; 
            precision = 5; 
            scale = 2; 
            valueClassName = NSDecimalNumber; 
            valueType = B; 
        }, 
        {
            columnName = "MREC_KEY"; 
            externalType = NUMBER; 
            name = mrecKey; 
            precision = 6; 
            valueClassName = NSNumber; 
            valueType = l; 
        }
    ); 
    attributesUsedForLocking = (
        idiplNumero, 
        mrecKey, 
        imrecDispense, 
        imrecEtat, 
        imrecAbsence1, 
        imrecMention1, 
        imrecSession1, 
        imrecAbsence2, 
        imrecMention2, 
        imrecSession2, 
        imrecCoefficient, 
        imrecNoteBase, 
        imrecPonderation, 
        imrecPointJury, 
        imrecObtention, 
        fannKey
    ); 
    className = "org.cocktail.groupescol.serveur.eof.ScolInscriptionEc"; 
    classProperties = (
        imrecDispense, 
        imrecEtat, 
        imrecAbsence1, 
        imrecMention1, 
        imrecSession1, 
        imrecAbsence2, 
        imrecMention2, 
        imrecSession2, 
        imrecCoefficient, 
        imrecNoteBase, 
        imrecPonderation, 
        imrecPointJury, 
        imrecObtention, 
        scolFormationAnnee, 
        scolMaquetteRepartitionEc
    ); 
    externalName = "SCOL_INSCRIPTION_EC"; 
    fetchSpecificationDictionary = {}; 
    internalInfo = {
        "_clientClassPropertyNames" = (
            imrecDispense, 
            imrecEtat, 
            imrecAbsence1, 
            imrecMention1, 
            imrecSession1, 
            imrecAbsence2, 
            imrecMention2, 
            imrecSession2, 
            imrecCoefficient, 
            imrecNoteBase, 
            imrecPonderation, 
            imrecPointJury, 
            imrecObtention, 
            scolFormationAnnee, 
            scolInscriptionEtudiant, 
            scolMaquetteRepartitionEc
        ); 
        "_javaClientClassName" = "org.cocktail.groupescol.client.eof.ScolInscriptionEc"; 
    }; 
    name = ScolInscriptionEc; 
    primaryKeyAttributes = (mrecKey, idiplNumero); 
    relationships = (
        {
            destination = ScolFormationAnnee; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = fannKey; sourceAttribute = fannKey; }); 
            name = scolFormationAnnee; 
        }, 
        {
            destination = ScolMaquetteRepartitionEc; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = mrecKey; sourceAttribute = mrecKey; }); 
            name = scolMaquetteRepartitionEc; 
        }
    ); 
}
